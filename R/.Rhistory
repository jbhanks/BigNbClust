install.packages("readr")
knitr::opts_chunk$set(echo = TRUE, fig.width = 10, fig.height = 8, dev = 'pdf', width = 140)
Sys.setenv(TZ = "US/Eastern")
source("scripts/full_analysis_funs4.R")
source("scripts/do_all_split2.R")
source("scripts/cohortCorrelations.R")
source("scripts/vennFunctions.R")
require(parallel)
library(readr)
require(edgeR)
require(limma)
require(VennDiagram)
require(grid)
require(stringi)
require(gplots)
require(ggplot2)
require(flashClust)
require(dynamicTreeCut)
require(VennDiagram)
#source("OneBigFunction3.R")
set.seed(714)
load("circRNA.Rdata")
print(locale())
RNA_seq_HBCC <- read_csv("info/RNA_seq_HBCC.csv")
RNA_seq_HBCC2 <- RNA_seq_HBCC[is.na(RNA_seq_HBCC$`RNA_seq_report: Exclude?`),]
RNA_seq_HBCC2 <- RNA_seq_HBCC2[!duplicated(RNA_seq_HBCC2$`RNA_seq_isolation: Sample RNA ID`),]
rownames(RNA_seq_HBCC2) <- RNA_seq_HBCC2$`RNA_seq_isolation: Sample RNA ID`
colnames(RNA_seq_HBCC2) <- gsub("RNA_seq_", "DLPFC_RNA_", colnames(RNA_seq_HBCC2))
tmpTrait <- obj$trait$HBCC_DLPFC[,!colnames(obj$trait$HBCC_DLPFC) %in% colnames(RNA_seq_HBCC2)]
ntrait <- merge(tmpTrait, RNA_seq_HBCC2, by="row.names")
rownames(ntrait) <- ntrait$Row.names
ntrait <- ntrait[,-1]
obj$trait$HBCC_DLPFC <- ntrait
capture.output(
mads_suppl <- read_csv("info/mads_genes.csv", skip = 1),
mads_genes <- as.vector(unlist(mads_suppl[,1])),
file="chunk3.txt")
capture.output(
for(name in names(obj$trait)){
obj$trait[[name]] <- obj$trait[[name]][order(rownames(obj$trait[[name]])),]
obj$trait2[[name]] <- prep_traits(obj = obj, cohort = name)
circ <- obj[["expr"]][[name]]
circ2 <- circ[,colnames(circ) %in% rownames(obj$trait[[name]])]
circ2 <- orderAll(circ2)
obj$circ2[[name]] <- circ2
print(name)
print(sum(colnames(circ2) != rownames(obj$trait[[name]])))
print(dim(circ2))
gene <- obj[["gene"]][[name]]
gene <- gene[,colnames(gene) %in% rownames(obj$trait[[name]])]
gene <- orderAll(gene)
obj$gene2[[name]] <- gene
print(sum(colnames(gene) != rownames(obj$trait[[name]])))
print(dim(gene))
},
for(name in names(obj$trait)){
both <- rbind(obj$gene2[[name]], obj$circ2[[name]])
DGE <- DGEList(counts = both, genes = rownames(both))
isexpr <- rowSums(cpm(DGE)>= .2) >= ncol(DGE)*0.2
DGE <- DGE[isexpr,]
DGE <- calcNormFactors(DGE, method = "TMM")
DGE2 <- DGE[,colnames(DGE) %in% rownames(obj$trait2[[name]])]
DGE.gene <- DGE2[rownames(DGE2) %in% rownames(obj[["gene2"]][[name]]),]
DGE.circ <- DGE2[rownames(DGE2) %in% rownames( obj[["circ2"]][[name]]),]
obj$dge.gene[[name]] <- DGE.gene
obj$dge.circ[[name]] <- DGE.circ
},
file="chunk4.txt"
)
capture.output(
xgenesMod1 <- Reduce(intersect, list(rownames(obj$dge.gene$CMC_ACC),rownames(obj$dge.gene$CMC_DLPFC),rownames(obj$dge.gene$HBCC_DLPFC))),
for(name in names(obj$trait)){
obj[["dge.gene"]][[name]] <-  obj[["dge.gene"]][[name]][rownames(obj[["dge.gene"]][[name]]) %in% xgenesMod1,]
print(dim(obj[["dge.gene"]][[name]] ))
},
xCircMod1 <- Reduce(intersect, list(rownames(obj$dge.circ$CMC_ACC),rownames(obj$dge.circ$CMC_DLPFC),rownames(obj$dge.circ$HBCC_DLPFC))),
for(name in names(obj$trait)){
obj[["dge.circ"]][[name]] <- obj[["dge.circ"]][[name]][rownames(obj[["dge.circ"]][[name]]) %in% xCircMod1,]
print(dim(obj[["dge.circ"]][[name]] ))
},
file="chunk4.txt"
)
capture.output(
varz <- c("Dx", "Gender", "Ethnicity", "isolation.RIN", "Age.of.Death", "PMI.in.hours."),
CMC_ACC.vars <- c("Institution", "report.Flowcell.Given.to.Core", varz),
CMC_DLPFC.vars <- c("Institution", "report.Ribozero.Batch", varz),
HBCC_DLPFC.vars <- c("Isolation.Batch", varz),
mod1 <- list(varz = varz, CMC_ACC.vars = CMC_ACC.vars, CMC_DLPFC.vars=CMC_DLPFC.vars, HBCC_DLPFC.vars = HBCC_DLPFC.vars),
file="chunk5.txt"
)
#load(file="pre-parallel.Rdata")
#require(ggplot2)
cluster <- makeCluster(3)
clusterExport(cluster, list("do_all", "do_analyze", "orderAll", "prep_traits", "ggplot", "ggsave", "venn.diagram", "grid", "stri_trans_general", "voomWithQualityWeights", "voom", "eBayes", "flashClust", "ggsave", "venn.diagram", "grid.newpage", "grid.draw", "pdf", "lmFit", "geom_point", "ggtitle", "geom_vline", "capture.output", "cutree"))
cohorts = c("CMC_ACC", "CMC_DLPFC", "HBCC_DLPFC")
all_results.mod1 <- clusterMap(cl = cluster, cohort=cohorts, do_all,
MoreArgs=list(obj = obj,
modname = "model1",
model = mod1,
outname = "final_output.Rdata",
optSet=c(clusterQW=TRUE,finalQW=TRUE)
))
knitr::opts_chunk$set(echo = TRUE, fig.width = 10, fig.height = 8, dev = 'pdf', width = 140)
Sys.setenv(TZ = "US/Eastern")
source("scripts/full_analysis_funs4.R")
source("scripts/do_all_split2.R")
source("scripts/cohortCorrelations.R")
source("scripts/vennFunctions.R")
require(parallel)
library(readr)
require(edgeR)
require(limma)
require(VennDiagram)
require(grid)
require(stringi)
require(gplots)
require(ggplot2)
require(flashClust)
require(dynamicTreeCut)
require(VennDiagram)
#source("OneBigFunction3.R")
set.seed(714)
load("circRNA.Rdata")
print(locale())
RNA_seq_HBCC <- read_csv("info/RNA_seq_HBCC.csv")
RNA_seq_HBCC2 <- RNA_seq_HBCC[is.na(RNA_seq_HBCC$`RNA_seq_report: Exclude?`),]
RNA_seq_HBCC2 <- RNA_seq_HBCC2[!duplicated(RNA_seq_HBCC2$`RNA_seq_isolation: Sample RNA ID`),]
rownames(RNA_seq_HBCC2) <- RNA_seq_HBCC2$`RNA_seq_isolation: Sample RNA ID`
colnames(RNA_seq_HBCC2) <- gsub("RNA_seq_", "DLPFC_RNA_", colnames(RNA_seq_HBCC2))
tmpTrait <- obj$trait$HBCC_DLPFC[,!colnames(obj$trait$HBCC_DLPFC) %in% colnames(RNA_seq_HBCC2)]
ntrait <- merge(tmpTrait, RNA_seq_HBCC2, by="row.names")
rownames(ntrait) <- ntrait$Row.names
ntrait <- ntrait[,-1]
obj$trait$HBCC_DLPFC <- ntrait
capture.output(
mads_suppl <- read_csv("info/mads_genes.csv", skip = 1),
mads_genes <- as.vector(unlist(mads_suppl[,1])),
file="chunk3.txt")
capture.output(
for(name in names(obj$trait)){
obj$trait[[name]] <- obj$trait[[name]][order(rownames(obj$trait[[name]])),]
obj$trait2[[name]] <- prep_traits(obj = obj, cohort = name)
circ <- obj[["expr"]][[name]]
circ2 <- circ[,colnames(circ) %in% rownames(obj$trait[[name]])]
circ2 <- orderAll(circ2)
obj$circ2[[name]] <- circ2
print(name)
print(sum(colnames(circ2) != rownames(obj$trait[[name]])))
print(dim(circ2))
gene <- obj[["gene"]][[name]]
gene <- gene[,colnames(gene) %in% rownames(obj$trait[[name]])]
gene <- orderAll(gene)
obj$gene2[[name]] <- gene
print(sum(colnames(gene) != rownames(obj$trait[[name]])))
print(dim(gene))
},
for(name in names(obj$trait)){
both <- rbind(obj$gene2[[name]], obj$circ2[[name]])
DGE <- DGEList(counts = both, genes = rownames(both))
isexpr <- rowSums(cpm(DGE)>= .2) >= ncol(DGE)*0.2
DGE <- DGE[isexpr,]
DGE <- calcNormFactors(DGE, method = "TMM")
DGE2 <- DGE[,colnames(DGE) %in% rownames(obj$trait2[[name]])]
DGE.gene <- DGE2[rownames(DGE2) %in% rownames(obj[["gene2"]][[name]]),]
DGE.circ <- DGE2[rownames(DGE2) %in% rownames( obj[["circ2"]][[name]]),]
obj$dge.gene[[name]] <- DGE.gene
obj$dge.circ[[name]] <- DGE.circ
},
file="chunk4.txt"
)
capture.output(
xgenesMod1 <- Reduce(intersect, list(rownames(obj$dge.gene$CMC_ACC),rownames(obj$dge.gene$CMC_DLPFC),rownames(obj$dge.gene$HBCC_DLPFC))),
for(name in names(obj$trait)){
obj[["dge.gene"]][[name]] <-  obj[["dge.gene"]][[name]][rownames(obj[["dge.gene"]][[name]]) %in% xgenesMod1,]
print(dim(obj[["dge.gene"]][[name]] ))
},
xCircMod1 <- Reduce(intersect, list(rownames(obj$dge.circ$CMC_ACC),rownames(obj$dge.circ$CMC_DLPFC),rownames(obj$dge.circ$HBCC_DLPFC))),
for(name in names(obj$trait)){
obj[["dge.circ"]][[name]] <- obj[["dge.circ"]][[name]][rownames(obj[["dge.circ"]][[name]]) %in% xCircMod1,]
print(dim(obj[["dge.circ"]][[name]] ))
},
file="chunk4.txt"
)
capture.output(
varz <- c("Dx", "Gender", "Ethnicity", "isolation.RIN", "Age.of.Death", "PMI.in.hours."),
CMC_ACC.vars <- c("Institution", "report.Flowcell.Given.to.Core", varz),
CMC_DLPFC.vars <- c("Institution", "report.Ribozero.Batch", varz),
HBCC_DLPFC.vars <- c("Isolation.Batch", varz),
mod1 <- list(varz = varz, CMC_ACC.vars = CMC_ACC.vars, CMC_DLPFC.vars=CMC_DLPFC.vars, HBCC_DLPFC.vars = HBCC_DLPFC.vars),
file="chunk5.txt"
)
#load(file="pre-parallel.Rdata")
#require(ggplot2)
cluster <- makeCluster(3)
clusterExport(cluster, list("do_all", "do_analyze", "orderAll", "prep_traits", "ggplot", "ggsave", "venn.diagram", "grid", "stri_trans_general", "voomWithQualityWeights", "voom", "eBayes", "flashClust", "ggsave", "venn.diagram", "grid.newpage", "grid.draw", "pdf", "lmFit", "geom_point", "ggtitle", "geom_vline", "capture.output", "cutree"))
cohorts = c("CMC_ACC", "CMC_DLPFC", "HBCC_DLPFC")
all_results.mod1 <- clusterMap(cl = cluster, cohort=cohorts, do_all,
MoreArgs=list(obj = obj,
modname = "model1",
model = mod1,
outname = "final_output.Rdata",
optSet=c(clusterQW=TRUE,finalQW=TRUE)
))
stopCluster(cluster)
cor_res.mod1 <- list()
cor_res.mod1[["corz.AveExpr.circles.mod1.qw"]] <- mkCor(reslist=all_results.mod1, measure="AveExpr", type="circles", mtitle="model1.circles.qw")
cor_res.mod1[["corz.AveExpr.genes.mod1.qw"]] <- mkCor(reslist=all_results.mod1, measure="AveExpr", type="genes", mtitle="model1.genes.qw")
cor_res.mod1[["corz.logFC.circles.mod1.qw"]] <- mkCor(reslist=all_results.mod1, measure="logFC", type="circles", mtitle="model1.circles.qw")
cor_res.mod1[["corz.logFC.genes.mod1.qw"]] <- mkCor(reslist=all_results.mod1, measure="logFC", type="genes", mtitle="model1.genes.qw")
cor_res.mod1[["corz.t.circles.mod1.qw"]] <- mkCor(reslist=all_results.mod1, measure="t", type="circles", mtitle="model1.circles.qw")
cor_res.mod1[["corz.t.gene.mod1.qw"]] <- mkCor(reslist=all_results.mod1, measure="t", type="genes", mtitle="model1.genes.qw")
mkVenn1(resultList = all_results.mod1, type="circles", ttl = "model1.circles.qw")
mkVenn1(resultList = all_results.mod1, type="genes", ttl = "model1.genes.qw")
mkVenn2(resultList = all_results.mod1, type="genes", mads_genez = mads_genes, ttl="model1.qw")
save(all_results.mod1, file = "results/mod1.qw.Rdata")
final_results_qw <- all_results.mod1
save(final_results_qw, file="final_results_qw.Rdata")
load("/home/james/nfs-cloud/PanosLab/CircRNA/cRNA_for_Panos/final_results_qw.Rdata")
all_results.mod1$CMC_ACC$circles$final.model
all_results.mod1$CMC_DLPFC$circles$final.model
all_results.mod1$CMC_DLPFC$genes\$final.model
all_results.mod1$CMC_DLPFC$genes$final.model
all_results.mod1$HBCC_DLPFC$genes$final.model
colnames(all_results.mod1$HBCC_DLPFC$genes$final.design)
library(factoextra)
library(NbClust)
x <- rbind(matrix(rnorm(180, mean = 1, sd = 0.2), ncol = 6),
matrix(rnorm(180, mean = 1.5, sd = 0.1), ncol = 6),
matrix(rnorm(180, mean = 5, sd = 0.25), ncol = 6),
matrix(rnorm(180, mean = 8, sd = 0.15), ncol = 6))
fviz_nbclust(x, kmeans, nstart = 25, iter.max=15,  method = "gap_stat", nboot = 50)+
labs(paste(subtitle = "Gap statistic method"))
NB = NbClust(data = x, diss = NULL, distance = "euclidean", min.nc = 2, max.nc = ncol(x),
method = "ward.D2", index = "gap", alphaBeale = 0.1)
#Sys.setenv(TZ = "US/Eastern")
Sys.setlocale('LC_ALL','C')
source("scripts/calcResiduals.R")
source("scripts/make_matrix_functions.gap_cluster.R")
source("scripts/do_all_matrices2.R")
require(parallel)
require(readr)
require(grid)
require(edgeR)
require(stringi)
require(gplots)
require(ggplot2)
require(flashClust)
require(dynamicTreeCut)
require(cluster)
set.seed(714)
# modifications[[""]] = list(note = "",
#                                      df=data.frame())
#
#load the raw count data
load("circRNA.Rdata")
obj_original = obj
for(cohort in names(obj$trait)){
colnames(obj$trait [[cohort]]) = stringi::stri_trans_general(colnames(obj$trait [[cohort]]), "Latin-ASCII")
}
drop_unneeded_cols =  function(traits=traits, cohort = cohort){
colnames(traits) <- stringi::stri_trans_general(colnames(traits), "Latin-ASCII")
if(grepl("DLPFC", cohort)){
traits <- traits[,!grepl("array|hippo|array|chip|neun|H3K27ac|DNA|ACC", colnames(traits), ignore.case = TRUE)]
}else if(grepl("ACC", cohort)){
traits <- traits[,!grepl("array|hippo|array|chip|neun|H3K27ac|DNA|DLPFC", colnames(traits), ignore.case = TRUE)]
} else{
return("problems")
return(traits)
}}
fix_trait_rows = function(traits=traits, cohort = cohort){
traits <- traits[traits$Dx %in% c("Control", "SCZ"),]
if(grepl("DLPFC", cohort)){
traits <- traits[!traits[["DLPFC_RNA_report: Exclude?"]] %in% 1,]
}else if(grepl("ACC", cohort)){
traits <- traits[!traits[["ACC_RNA_report: Exclude?"]] %in% 1,]
} else{
return("problems")
return(traits)
}}
fix_trait_cols = function(traits=traits, cohort = cohort){
traits <- traits[,apply(traits, MARGIN = 2, FUN= function(x) length(unique(x))) > 1]
colnames(traits) <- gsub("[ +]", ".", colnames(traits))
colnames(traits) <- gsub(": ", ".", colnames(traits))
colnames(traits) <- gsub("[^a-zA-Z\\0-9\\.]", "\\.", colnames(traits))
colnames(traits) <- gsub("\\.+", ".", colnames(traits))
colnames(traits) <- gsub(".*RNA\\.", "", colnames(traits))
traits <- traits[,apply(traits, MARGIN = 2, FUN= function(x) length(unique(x))) > 1]
varCols <- colnames(traits)
#Drop irrelevant columns and samples marked for exclusion, and fix more column names
if(grepl("DLPFC", cohort)){
traits <- traits[,!grepl("ACC[RN_]", varCols, ignore.case = TRUE)]
}else if(grepl("ACC", cohort)){
traits <- traits[,!grepl("DLPFC", varCols, ignore.case = TRUE)]
} else{
return("problems")
}
return(traits)
}
set_batches = function(traits=traits, cohort = cohort){
columns <- colnames(traits)
batchCols <- colnames(traits[,(grepl("flowcell|batch|date", colnames(traits), ignore.case = TRUE) &
!(grepl("Hippo|array|chip|NeuN", colnames(traits) , ignore.case = TRUE)))])
batchCols <- gsub(".*RNA\\.", "", batchCols)
notbatch <- columns[!grepl("batch|Date|Flowcell", columns, ignore.case = TRUE)]
#List the columns that will definitely be kept
keepCols <- c("Dx", "Gender", "Ethnicity", "isolation.RIN", "Age.of.Death", "Institution", "PMI.in.hours.", batchCols)
traits <- traits[,colnames(traits) %in% keepCols]
#drop any invariant columns
traits <-  traits[order(rownames(traits)),]
#place samples with missing batch information into one "batch".
traits[,grep("batch|Date|flowcell",
colnames(traits),
ignore.case = TRUE)][is.na(traits)[,grep("batch|Date|flowcell",
colnames(traits),
ignore.case = TRUE)]] <- "none"
#drop any samples missing info data
traits <- na.omit(traits)
return(traits)
}
for(cohort in names(obj$trait)){
print(cohort)
traits = drop_unneeded_cols(traits = obj$trait[[cohort]], cohort = cohort)
traits = fix_trait_rows(traits = traits, cohort = cohort)
traits = fix_trait_cols(traits = traits, cohort = cohort)
traits = set_batches(traits=traits, cohort = cohort)
print(dim(traits))
obj$trait[[cohort]] = traits
print(dim(obj$trait[[cohort]]))
}
for(cohort in names(obj$trait)){
#order
obj$trait[[cohort]] <- obj$trait[[cohort]][order(rownames(obj$trait[[cohort]])),]
circ <- obj[["expr"]][[cohort]]
circ2 <- circ[,colnames(circ) %in% rownames(obj$trait[[cohort]])]
circ2 <- orderAll(circ2)
obj$circ2[[cohort]] <- circ2
gene <- obj[["gene"]][[cohort]]
gene <- gene[,colnames(gene) %in% rownames(obj$trait[[cohort]])]
gene <- orderAll(gene)
obj$gene2[[cohort]] <- gene
}
#Make DGE objects and filter low expressed genes
for(cohort in names(obj$trait)){
both <- rbind(obj$gene2[[cohort]], obj$circ2[[cohort]])
DGE <- DGEList(counts = both, genes = rownames(both))
isexpr <- rowSums(cpm(DGE)>= .2) >= ncol(DGE)*0.2
DGE <- DGE[isexpr,]
DGE <- calcNormFactors(DGE, method = "TMM")
DGE2 <- DGE[,colnames(DGE) %in% rownames(obj$trait[[cohort]])]
DGE.gene <- DGE2[rownames(DGE2) %in% rownames(obj[["gene2"]][[cohort]]),]
DGE.circ <- DGE2[rownames(DGE2) %in% rownames( obj[["circ2"]][[cohort]]),]
obj$dge.gene[[cohort]] <- DGE.gene
obj$dge.circ[[cohort]] <- DGE.circ
}
#Keep only the genes/circles present in all cohorts
xgenesMod1 <- Reduce(intersect, list(rownames(obj$dge.gene$CMC_ACC),rownames(obj$dge.gene$CMC_DLPFC),rownames(obj$dge.gene$HBCC_DLPFC)))
for(name in names(obj$trait)){
print(dim(obj[["dge.gene"]][[name]]))
obj[["dge.gene"]][[name]] <-  obj[["dge.gene"]][[name]][rownames(obj[["dge.gene"]][[name]]) %in% xgenesMod1,]
print(dim(obj[["dge.gene"]][[name]]))
}
xCircMod1 <- Reduce(intersect, list(rownames(obj$dge.circ$CMC_ACC),rownames(obj$dge.circ$CMC_DLPFC),rownames(obj$dge.circ$HBCC_DLPFC)))
for(name in names(obj$trait)){
print(dim(obj[["dge.circ"]][[name]]))
obj[["dge.circ"]][[name]] <- obj[["dge.circ"]][[name]][rownames(obj[["dge.circ"]][[name]]) %in% xCircMod1,]
print(dim(obj[["dge.circ"]][[name]]))
}
#select the variables to be used in each cohort.
varz <- c("Dx", "Gender", "Ethnicity", "isolation.RIN", "Age.of.Death", "PMI.in.hours.")
CMC_ACC.vars <- c("Institution", "report.Flowcell.Given.to.Core", varz)
CMC_DLPFC.vars <- c("Institution", "report.Ribozero.Batch", varz)
HBCC_DLPFC.vars <- c("Isolation.Batch", varz)
mod1 <- list(varz = varz, CMC_ACC.vars = CMC_ACC.vars, CMC_DLPFC.vars=CMC_DLPFC.vars, HBCC_DLPFC.vars = HBCC_DLPFC.vars)
load("/home/james/nfs-cloud/PanosLab/CircRNA/cRNA2.0/coefs.CMC_DLPFCIsolation.Batchcircles.Rdata")
data = coefs
jeu1 <- as.matrix(data)
numberObsBefore <- dim(jeu1)[1]
jeu <- na.omit(jeu1)
nn <- numberObsAfter <- dim(jeu)[1]
print(nn)
pp <- dim(jeu)[2]
TT <- t(jeu) %*% jeu
print(dim(TT))
save(TT, nn, file = paste("/home/james/nfs-cloud/PanosLab/CircRNA/cRNA2.0/TTtest", cohort, variable, "Rdata", sep="."))
sizeEigenTT <- length(eigen(TT)$value)
eigenValues <- eigen(TT/(nn - 1))$value
save(eigenValues, file = paste("/home/james/nfs-cloud/PanosLab/CircRNA/cRNA2.0/eigenVals", cohort, variable, "Rdata", sep="."))
object.size(eigenValues)
object.size(TT)
if (any(indice == 4) || (indice == 5) || (indice ==
6) || (indice == 7) || (indice == 8) || (indice ==
9) || (indice == 10) || (indice == 31) || (indice ==
32)) {
for (i in 1:sizeEigenTT) {
if (eigenValues[i] < 0) {
stop("The TSS matrix is indefinite. There must be too many missing values. The index cannot be calculated.")
}
}
s1 <- sqrt(eigenValues)
ss <- rep(1, sizeEigenTT)
for (i in 1:sizeEigenTT) {
if (s1[i] != 0)
ss[i] = s1[i]
}
vv <- prod(ss)
}
else {
jeu1 <- as.matrix(data)
numberObsBefore <- dim(jeu1)[1]
jeu <- na.omit(jeu1)
nn <- numberObsAfter <- dim(jeu)[1]
print(nn)
pp <- dim(jeu)[2]
TT <- t(jeu) %*% jeu
print(dim(TT))
save(TT, nn, file = paste("/home/james/nfs-cloud/PanosLab/CircRNA/cRNA2.0/TTtest", cohort, variable, "Rdata", sep="."))
sizeEigenTT <- length(eigen(TT)$value)
print(dim(nn - 1))
eigenValues <- eigen(TT/(nn - 1))$value
save(eigenValues, file = paste("/home/james/nfs-cloud/PanosLab/CircRNA/cRNA2.0/eigenVals", cohort, variable, "Rdata", sep="."))
if (any(indice == 4) || (indice == 5) || (indice ==
6) || (indice == 7) || (indice == 8) || (indice ==
9) || (indice == 10) || (indice == 31) || (indice ==
32)) {
for (i in 1:sizeEigenTT) {
if (eigenValues[i] < 0) {
stop("The TSS matrix is indefinite. There must be too many missing values. The index cannot be calculated.")
}
}
s1 <- sqrt(eigenValues)
ss <- rep(1, sizeEigenTT)
for (i in 1:sizeEigenTT) {
if (s1[i] != 0)
ss[i] = s1[i]
}
vv <- prod(ss)
}
}
if (is.null(distance))
distanceM <- 7
data = coefs
diss = NULL
distance = "minkowski"
min.nc = 2
max.nc = round(kmax)
method = "ward.D2"
index = "gap"
alphaBeale = 0.1
cohort = cohort
variable = i
?Rprof
memory.limit()
setwd("~/Gits/NbClust/R")
set.seed(123)
cluster_means = sample(1:100, 5)
mlist = list()
group = 1
for(cm in cluster_means){
name = as.character(cm)
m = data.frame(matrix(rnorm(20000*20,mean=cm,sd = (cm + 1)/20), 20000, 20))
colnames(m) <- paste(colnames(m), "batch", as.character(group), sep=".")
rownames(m) <- paste(rownames(m), "gene", as.character(group), sep=".")
mlist[[name]] = m
group = group + 1
}
test_data = t(do.call(cbind, cbind(mlist)))
setwd("~/Gits/NbClust/R")
source("NbClust_fork.R")
require(NbClust)
require(tictoc)
Rprof(filename = "NBC.Rprof.out", interval = 0.2, memory.profiling = TRUE, bufsize = 50L, line.profiling=TRUE)
tic("my fork")
NBfork = NbC(data = test_data, diss = NULL, distance = "euclidean", min.nc = 2, max.nc = 10,
method = "ward.D2", index = "gap", alphaBeale = 0.1)
toc()
